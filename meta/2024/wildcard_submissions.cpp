
#include <algorithm>
#include <array>
#include <iostream>
#include <format>
#include <functional>
#include <mutex>
#include <string>
#include <thread>
#include <vector>

// Wildcard Submissions
// https://www.facebook.com/codingcompetitions/hacker-cup/2024/round-1/problems/E
// kudos to: tourist

// Every input string defines some nodes in trie. We need to count union-set of those
// We will consider every posible subset selection of input strings as a subset and
// this subset contribution to the union-set as defined by inclusion-exclusion principle.
// For each subset we care only for intersection of trie nodes defined by selected strings,
// meaning common prefix of all strings in the subset.

const int MAX_LEN = 103;
const int64_t M = 998244353;
std::array<int64_t, MAX_LEN> pw; // powers of 26 modulo M

static int solve_128(const std::vector<std::string>& words) // requires Clang
{
    static const __int128 one{1};
    const int N = int(words.size());

    std::vector<int> lengths(N);
    for (int i = 0; i < N; ++i)
        lengths[i] = int(words[i].size());

    std::vector<std::vector<int>> common_prefix(N, std::vector<int>(N));
    for (int i = 0; i < N; ++i)
        for (int j = i + 1; j < N; ++j) {
            const int common = std::min(lengths[i], lengths[j]);
            for (int k = 0; k < common; ++k) {
                if (words[i][k] != '?' && words[j][k] != '?' && words[i][k] != words[j][k])
                    break;
                ++common_prefix[i][j];
            }
        }

    std::vector<__int128> masks(N);
    for (int i = 0; i < N; ++i) {
        const auto& s = words[i];
        const int len = lengths[i];
        auto& mask = masks[i];
        for (int j = 0; j < len; ++j)
            if (s[j] == '?')
                mask |= one << j;
    }

    std::vector<int> coeff(MAX_LEN);
    std::function<void(int, int, int, __int128, __int128)> drill =
        [&](int cur, int taken, int cmn_pref, __int128 selection, __int128 wildcards) {
            if (cur == N) {
                if (0 < taken) {
                    int ord{};
                    const int sign = 2 * (taken & 1) - 1;
                    for (int i = 0; i < cmn_pref; ++i) {
                        if (wildcards & (one << i))
                            ++ord;
                        coeff[ord] += sign;
                    }
                }
                return;
            }

            // ignore cur
            drill(cur + 1, taken, cmn_pref, selection, wildcards);
            // take cur
            cmn_pref = std::min(cmn_pref, lengths[cur]);
            for (int i = 0; i < cur; ++i)
                if (selection & (one << i))
                    cmn_pref = std::min(cmn_pref, common_prefix[i][cur]);
            drill(cur + 1, taken + 1, cmn_pref, selection | (one << cur), wildcards & masks[cur]);
        };

    drill(0, 0, MAX_LEN, __int128{}, __int128{-1});

    int64_t ret{1};
    for (int i = 0; i < MAX_LEN; ++i)
        ret += coeff[i] * pw[i] % M;

    return (ret + M) % M;
}

static int solve(const std::vector<std::string>& words)
{
    const int N = int(words.size());

    std::vector<int> lengths(N);
    for (int i = 0; i < N; ++i)
        lengths[i] = int(words[i].size());

    std::vector<std::vector<int>> common_prefix(N, std::vector<int>(N));
    for (int i = 0; i < N; ++i)
        for (int j = i + 1; j < N; ++j) {
            const int common = std::min(lengths[i], lengths[j]);
            for (int k = 0; k < common; ++k) {
                if (words[i][k] != '?' && words[j][k] != '?' && words[i][k] != words[j][k])
                    break;
                ++common_prefix[i][j];
            }
        }

    std::vector<std::vector<bool>> masks(N);
    for (int i = 0; i < N; ++i) {
        const auto& s = words[i];
        const int len = lengths[i];
        auto& mask = masks[i];
        mask.reserve(len);
        for (int j = 0; j < len; ++j)
            mask.push_back(s[j] == '?');
    }

    std::vector<int> coeff(MAX_LEN);
    std::function<void(int, int, int, std::vector<bool>, std::vector<bool>)> drill =
        [&](int cur, int taken, int cmn_pref, std::vector<bool> selection, std::vector<bool> wildcards) {
            if (cur == N) {
                if (0 < taken) {
                    int ord{};
                    const int sign = 2 * (taken & 1) - 1;
                    for (int i = 0; i < cmn_pref; ++i) {
                        if (wildcards[i])
                            ++ord;
                        coeff[ord] += sign;
                    }
                }
                return;
            }

            // ignore cur
            drill(cur + 1, taken, cmn_pref, selection, wildcards);
            // take cur
            selection[cur] = true;
            const int len = lengths[cur];
            const auto& mask = masks[cur];
            cmn_pref = std::min(cmn_pref, len);
            for (int i = 0; i < cur; ++i)
                if (selection[i])
                    cmn_pref = std::min(cmn_pref, common_prefix[i][cur]);
            for (int i = 0; i < cmn_pref; ++i)
                wildcards[i] = wildcards[i] && mask[i];
            drill(cur + 1, taken + 1, cmn_pref, selection, wildcards);
        };

    drill(0, 0, MAX_LEN, std::vector<bool>(MAX_LEN), std::vector<bool>(MAX_LEN, true));

    int64_t ret{1};
    for (int i = 0; i < MAX_LEN; ++i)
        ret += coeff[i] * pw[i] % M;

    return (ret + M) % M;
}

int case_id{};
int no_of_cases;
std::mutex runner_mutex;
std::vector<std::vector<std::string>> arg0;
std::vector<int> ans;

// For each CPU run next test case until the backlog is empty
void multithreaded_solve()
{
    while (true) {
        runner_mutex.lock();
        const int cur = case_id;
        if (cur >= no_of_cases) {
            runner_mutex.unlock();
            return;
        }
        ++case_id;

        int N;
        std::cin >> N;
        auto& arg = arg0[cur];
        arg.resize(N);
        for (auto& a : arg)
            std::cin >> a;

        runner_mutex.unlock();
        ans[cur] = solve_128(arg0[cur]);
    }
}

int main(int, char**)
{
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);

    pw[0] = 1;
    for (int i = 1; i < MAX_LEN; ++i)
        pw[i] = (pw[i - 1] * 26) % M;

    std::cin >> no_of_cases;
    arg0.resize(no_of_cases);
    ans.resize(no_of_cases);
    const auto cpu_cnt = int(std::thread::hardware_concurrency());

    std::vector<std::thread> joinable;
    for (int i = 0; i < cpu_cnt; ++i)
        joinable.emplace_back(multithreaded_solve);
    for (auto& t : joinable)
        t.join();
    for (int g = 1; g <= no_of_cases; ++g)
        std::cout << std::format("Case #{}: {}\n", g, ans[g - 1]);
}

/*

Format:
clang-format -i wildcard_submissions.cpp

Compile:
cls && clang++.exe -Wall -Wextra -g -O0 -std=c++20 wildcard_submissions.cpp -o wildcard_submissions.exe
g++ -Wall -Wextra -g3 -Og -std=c++20 -fsanitize=address wildcard_submissions.cpp -o wildcard_submissions

Run:
wildcard_submissions.exe < wildcard_submissions.in

Input:

1
25
E??K??W?JTJ??D?Z???ROGX?EBP?CW?PVY?T??SGFTI??XGFI??URE??U????M??S?UI????G??RBF?R???S?CSGY???IE?N??W
????YD?UJ???L?CZ??L????HE??JC?TPVY??N?S???I?FXGFIBFUR?TGU?D????SSFU?PY????E?BFPR?A?S?CSGY??PIE???AW?
E?????????J?LDC?MY?????H???JC?T?VYI????????YFX?FI?F?R??GUUD?????????P?W??LER??PR??HS????Y?H?IEKNP?W
?B???DWUJTJCLD?ZM??RO??H???J?W?P???T?PS?F????XG???????T??UDQN?Q?S?UI???Q?L???F??W?H??C??Y?HP?E??PAW
??NK?D?U?T?CLDC?M?L??G??EB?J??????????SG???YFXGFI?F?R?TG????NM??S?UIP?W?G?E?B??????SY?S??R?PI??NQ?LX
?BNK??WU?TJ????Z?YLRO??HEBP??W??V?ITNPSGF?I?FX?F?B?UR?T?UU?QN??SSFUIPYW?G?ER?????AHS?C?????PI?K??A?Z
EBNK??WUJ????D?ZM?L?OG?HE??JCWTPVY?T??SGF?IYFXGF?B??R?????D?NM???????????LER???R???S??S?YRH??????L??
E??KYD?U?T???DCZ??L?O??H?BPJCWT?V?I?N???F???FXG?IB????T??UDQ?MQ?S???????G?ERBF?RW?H?Y?SG?RH?I?KNP?W
EBNK?D??JT?C?DC?M?L???XHE?PJ???P?Y???PS??TI????FI??U??T???D??M??SFU?????????B??R??H?Y?SG???P?E?NQ?L
????YDW????CL?CZ?Y??OGXHE?P???T??YITNP?G?TIY???F????R?TGU??Q??Q????IP??QGL?R?FP??A??YCSG?RH??E?NQ?L?
??NK??WU???C?DC?MY?R???HEB?JC?TP???TNP??F?IY?XG??BF?RET?UUD??MQSSFUIP??Q??ERB?P?W???YC?GY????EK?P???
E?NK?DW??TJCL???????OG??E?????TP?Y??N??GFT?????F????R???U??Q?MQS???IP???G?E?BF?RWA?SY?SGY??P??K?P??Z
?BN??????TJ?L???M?L?O?X?E??JC???V?ITNP?GFT?YF?GF?B?U???G?????MQ?S?UIPYW???E?????WA?S?C??Y??P?EK??AW
?BNKY?WU?????????YL????H????C?TPVYI?NP??FTIY?????BF?RE?G??DQ??QSSF?IPY?Q???R?FP?W?HS??SGY??P?EKN???
??NK?DWU??????CZ?Y?R??XH????CW????I?N??GF?IY?X?FIBF?R?T??U?Q?M?S??UI?YW?GLE??FP???HSY?SG???PIEKN????
E??K?D??J???L?CZ??LROG??E????????YIT?P?GFT??FXG??B??R?TGU?DQ??QSSF?I??WQ??E?BF??WAHSY?SG?????E?N?AW
E???YD??J?J???C?MYLRO???EB??C???V?IT?PSG????FXGFIB??RET?????N?QSSF??P??QGLER?????A??Y?SG?RHPIE?NQ?L
EB?K?DWUJ?JCLD?ZM??RO?X?E?PJCW?PV????P???????X?FI?FURE??UUD??M??S?UIPY??G??R?FP??AHS??S??RH?I?K?PA?
EBNKY?WUJTJ?????M?L??G????P??W??V?I???S??T?YFXGFI??U?E???U?QN?Q?SFU?PYWQG????FPRWAH???S?Y?H?I???P???
????YD?UJTJC?D???Y????X???P?C???VY??N???FT?Y??G?IB?U???G???QN?Q??FUIP?W?GLER?FP?WAH?????YRHPI??NPAWZ
??N???W?J????D?ZM?LR???HE?P???T?VYI???SGF????X????FU??????D??MQ?SFU????QG??RB??R??????S???H??EK??A??
?B?K?DW?JT?C?DC???LRO??H??PJCW????I???SG???Y?????BFU?E?G?UD?NM?S?F?IPY??G?E??FPRW?H???SG????I????AW
EB??YD?UJ?JC?D?ZMYL?O?X??B?J???PV?ITN???FT?YFX???BFUR?T??????M???F??P???GL?RBFP??AH?YC?GY????EK?PA??
E???YD???T??L??Z?Y?????HE?PJ?WTP??ITN?SGFTIY??GFI?FURE?G?UDQ?MQ????IP?WQ?L?RB?PRWAHSY?S?YRHPI??NP?W
????Y??U?T?CL?C???L?OGX?E??JC?TP??I??PSG??I???G?I?FU?ETGUU?QN???SF?I?YW?GL?RBFPRW?????SGY?HP?E?NPAW

Output:

Case #1: 914629767

*/
